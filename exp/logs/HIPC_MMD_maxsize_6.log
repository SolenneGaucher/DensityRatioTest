> rm(list=ls())
> set.seed(0)
> setwd("/workdir2/solenne.gaucher/FlowCytometry")
> #setwd("~/Desktop/Recherche/postdoc/FlowCyto/SimulationsV2")
> 
> # Load packages
> library(doParallel)
Le chargement a nécessité le package : foreach
Le chargement a nécessité le package : iterators
Le chargement a nécessité le package : parallel
> library(foreach)
> library(lubridate)

Attachement du package : ‘lubridate’

Les objets suivants sont masqués depuis ‘package:base’:

    date, intersect, setdiff, union

> 
> ################################ Parameters ############################
> cell_choice <- c(6)
> theta_choice <-  c(0, exp(seq(log(0.001), log(0.3), length.out = 40)))
> B_iterations <- 500
> alpha_choice <- c(0, 0.003125, 0.00625, 0.0125, 0.025, 0.05, 0.06, 0.07)
> max_size_test <- 10000
> n_synth <- 10
> 
> ################################ Load and pre-process HIPC data ############################
> lab_names <- c("W2","FTV","IU","D54","O0","pM","pw")
> data_df <- data.frame(matrix(ncol = 5+7, nrow = 0))
> colnames(data_df) <- c("patient", "unique_patient", "replicate", "lab", "cell_type", 
+                        "CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")
> unique_pat <- 1
> for (lab in lab_names){
+   for (pat in 1:3){
+     for (rep in 1:3){
+       if (file.exists(paste("data/HIPC/", lab,"_", 3*(pat-1) + rep, "_values.csv", sep= ""))){
+         data_pat <- read.csv(paste("data/HIPC/", lab,"_", 3*(pat-1) + rep, "_values.csv", sep= ""))[,2:8]
+         data_pat$cell_type <- read.csv(paste("data/HIPC/", lab,"_", 3*(pat-1) + rep, "_clust.csv", sep= ""))[, 2]
+         data_pat$cell_type <- as.factor(data_pat$cell_type)
+         data_pat$patient <- pat
+         data_pat$patient <- as.factor(data_pat$patient)
+         data_pat$unique_patient <- unique_pat
+         data_pat$replicate <- rep
+         data_pat$replicate <- as.factor(data_pat$replicate)
+         data_pat$lab <- lab
+         data_pat$lab <- as.factor(data_pat$lab)
+         data_df <- rbind(data_df, data_pat)
+         print(paste("lab : ", lab, ", pat : ", 3*(pat-1) + rep, ", sample size : ", nrow(data_pat)))
+         unique_pat <- unique_pat + 1
+       }
+     }
+   }
+ }
[1] "lab :  W2 , pat :  1 , sample size :  31342"
[1] "lab :  W2 , pat :  2 , sample size :  37260"
[1] "lab :  W2 , pat :  3 , sample size :  35541"
[1] "lab :  W2 , pat :  4 , sample size :  32273"
[1] "lab :  W2 , pat :  5 , sample size :  32258"
[1] "lab :  W2 , pat :  6 , sample size :  38483"
[1] "lab :  W2 , pat :  7 , sample size :  33992"
[1] "lab :  W2 , pat :  8 , sample size :  33936"
[1] "lab :  W2 , pat :  9 , sample size :  33960"
[1] "lab :  FTV , pat :  1 , sample size :  21900"
[1] "lab :  FTV , pat :  2 , sample size :  22254"
[1] "lab :  FTV , pat :  3 , sample size :  22933"
[1] "lab :  FTV , pat :  4 , sample size :  18692"
[1] "lab :  FTV , pat :  5 , sample size :  19680"
[1] "lab :  FTV , pat :  6 , sample size :  15880"
[1] "lab :  FTV , pat :  7 , sample size :  18625"
[1] "lab :  FTV , pat :  8 , sample size :  15927"
[1] "lab :  FTV , pat :  9 , sample size :  15544"
[1] "lab :  IU , pat :  1 , sample size :  21438"
[1] "lab :  IU , pat :  2 , sample size :  44944"
[1] "lab :  IU , pat :  3 , sample size :  45853"
[1] "lab :  IU , pat :  4 , sample size :  46021"
[1] "lab :  IU , pat :  5 , sample size :  45949"
[1] "lab :  IU , pat :  6 , sample size :  45045"
[1] "lab :  IU , pat :  7 , sample size :  44681"
[1] "lab :  IU , pat :  8 , sample size :  43909"
[1] "lab :  IU , pat :  9 , sample size :  44027"
[1] "lab :  D54 , pat :  1 , sample size :  29277"
[1] "lab :  D54 , pat :  2 , sample size :  50928"
[1] "lab :  D54 , pat :  3 , sample size :  51312"
[1] "lab :  D54 , pat :  4 , sample size :  44376"
[1] "lab :  D54 , pat :  5 , sample size :  42932"
[1] "lab :  D54 , pat :  6 , sample size :  42601"
[1] "lab :  D54 , pat :  7 , sample size :  45150"
[1] "lab :  D54 , pat :  8 , sample size :  44914"
[1] "lab :  D54 , pat :  9 , sample size :  45000"
[1] "lab :  O0 , pat :  1 , sample size :  55789"
[1] "lab :  O0 , pat :  2 , sample size :  41018"
[1] "lab :  O0 , pat :  3 , sample size :  66249"
[1] "lab :  O0 , pat :  4 , sample size :  52307"
[1] "lab :  O0 , pat :  5 , sample size :  52295"
[1] "lab :  O0 , pat :  6 , sample size :  52557"
[1] "lab :  O0 , pat :  7 , sample size :  44429"
[1] "lab :  O0 , pat :  8 , sample size :  44112"
[1] "lab :  O0 , pat :  9 , sample size :  43725"
[1] "lab :  pM , pat :  1 , sample size :  17453"
[1] "lab :  pM , pat :  2 , sample size :  36191"
[1] "lab :  pM , pat :  3 , sample size :  36054"
[1] "lab :  pM , pat :  4 , sample size :  44664"
[1] "lab :  pM , pat :  5 , sample size :  42478"
[1] "lab :  pM , pat :  6 , sample size :  41842"
[1] "lab :  pM , pat :  7 , sample size :  42394"
[1] "lab :  pM , pat :  8 , sample size :  42545"
[1] "lab :  pM , pat :  9 , sample size :  41237"
[1] "lab :  pw , pat :  2 , sample size :  102888"
[1] "lab :  pw , pat :  3 , sample size :  88584"
[1] "lab :  pw , pat :  4 , sample size :  99076"
[1] "lab :  pw , pat :  5 , sample size :  112318"
[1] "lab :  pw , pat :  6 , sample size :  102178"
[1] "lab :  pw , pat :  7 , sample size :  74943"
[1] "lab :  pw , pat :  8 , sample size :  81226"
[1] "lab :  pw , pat :  9 , sample size :  78216"
> 
> ### Scale data to [0,1]**7 ###
> data_df$unique_patient <- as.factor(data_df$unique_patient)
> data_df[, c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")] <- apply(data_df[,c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")], MARGIN = 2,
+                                                                         FUN = function(X) (X - mean(X)))
> data_df[, c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")] <- asinh(data_df[, c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")])
> data_df[, c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")] <- apply(data_df[,c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")], MARGIN = 2, 
+                                                                         FUN = function(X) (X - min(X))/(range(X)[2]- range(X)[1]))
> 
> ################################ For parallelization ############################
> n.cores <- as.integer(parallel::detectCores()/6) - 1
> my.cluster <- parallel::makeCluster(
+   n.cores, 
+   type = "PSOCK",
+   outfile = ""
+ )
starting worker pid=1568301 on localhost:11749 at 14:12:04.256
starting worker pid=1568303 on localhost:11749 at 14:12:04.303
starting worker pid=1568299 on localhost:11749 at 14:12:04.316
starting worker pid=1568304 on localhost:11749 at 14:12:04.327
starting worker pid=1568306 on localhost:11749 at 14:12:04.337
starting worker pid=1568302 on localhost:11749 at 14:12:04.375
starting worker pid=1568300 on localhost:11749 at 14:12:04.395
starting worker pid=1568305 on localhost:11749 at 14:12:04.470
> doParallel::registerDoParallel(cl = my.cluster)
> 
> ############################################################
> print(paste("We begin the experiment, time is ", now()))
[1] "We begin the experiment, time is  2024-02-21 14:12:04"
> for (chosen_cell in cell_choice){
+   data_chosen_cell <- data_df
+   data_chosen_cell$cell_type <- 1*(data_chosen_cell$cell_type == chosen_cell)
+   names(data_chosen_cell)[names(data_chosen_cell) == 'cell_type'] <- "Y"
+   
+   res_cell <- data.frame(matrix(nrow = 0, ncol = 5))
+   names(res_cell) <- c("id", "theta",  "cell", "alpha", "power")
+   
+   res_cell <- foreach (id = levels(data_chosen_cell$unique_patient), .combine=rbind) %dopar%{
+     source("utils/aux.R")
+     source("utils/test_MMD.R")
+     library(foreach)
+     start <- lubridate::now()
+     
+     data_test <- data_chosen_cell[data_chosen_cell$unique_patient == id,]
+     n_test <- min(max_size_test,nrow(data_test))
+     data_train <- data_chosen_cell[data_chosen_cell$unique_patient != id & data_chosen_cell$Y == 0,]
+     
+     # Calibrate the test
+     # Split data : half for computing bootstrap thresholds, half for validation
+     id_thr <- sample(unique(data_train$unique_patient), floor(length(unique(data_train$unique_patient))/2))
+     data_thr <- data_train[data_train$unique_patient %in% id_thr,]
+     Xthr <- as.matrix(data_thr[,c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")])
+     data_val <- data_train[(!data_train$unique_patient %in% id_thr),]
+     
+     # Compute the quantiles of the test statistic for the different values of alpha 
+     bootstrap_slice <- as.numeric(as.matrix(data_thr$unique_patient))
+     qmmd <- quantile_MMDl_bootstrap(Xthr, n_test, B_iterations, alpha_choice, bootstrap_slice = bootstrap_slice, parallel = F)
+     threshold <- qmmd$threshold
+     sigma <- qmmd$sigma
+     
+     # Select a quantile best_alpha so that the test has empirical level 0 on validation set
+     
+     power <- rep(0, length(alpha_choice))
+     for (id_val in unique(data_val$unique_patient)){
+       Xval <- as.matrix(data_val[data_val$unique_patient == id_val,c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")])
+       Xval <- Xval[sample(nrow(Xval), n_test, replace = (nrow(Xval) < n_test)),]
+       result  <- test_MMDl_bootstrap(Xthr, Xval, threshold, sigma)
+       power <- power + result
+     }
+     if (power[1] > 0){
+       best_alpha <- 0
+     }else{
+       best_alpha <- alpha_choice[max(which(power == 0))]
+     }
+     
+     # Do the test!
+     # Re-estimate the statistics and threshold
+     Xtrain <- as.matrix(data_train[,c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")])
+     bootstrap_slice <- as.numeric(as.matrix(data_train$unique_patient))
+     qmmd <- quantile_MMDl_bootstrap(Xtrain, n_test, B_iterations, alpha = best_alpha, bootstrap_slice = bootstrap_slice, parallel = F)
+     threshold <- qmmd$threshold
+     sigma <- qmmd$sigma
+     
+     ######################################
+     # To create synthetic test sets for different prevalence theta, split cells 0 and 1
+     Xtest_0 <- as.matrix(data_test[data_test$Y == 0,c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")])
+     Xtest_1 <- as.matrix(data_test[data_test$Y == 1,c("CCR7","CD4","CD45RA","CD3","HLADR","CD38","CD8")])
+     res_id <- foreach (theta = theta_choice, .combine=rbind) %do% {
+       reject <- 0
+       for (r in 1:n_synth){
+         if (as.integer(theta*n_test) > 0){
+           Xtest <- rbind(Xtest_0[sample(nrow(Xtest_0), n_test - as.integer(theta*n_test), 
+                                         replace = (nrow(Xtest_0) < n_test - as.integer(theta*n_test))), ], 
+                          Xtest_1[sample(nrow(Xtest_1), as.integer(theta*n_test),
+                                         replace = (nrow(Xtest_1) < as.integer(theta*n_test))), ])
+         }else{
+           Xtest <- Xtest_0[sample(nrow(Xtest_0), n_test, replace = TRUE), ]
+         }
+         reject <- reject + test_MMDl_bootstrap(Xtrain, Xtest, threshold, sigma)
+       }
+       return(data.frame(id = id, theta = theta, cell = chosen_cell, best_alpha = best_alpha, power = reject/n_synth, max_size_test = max_size_test))
+     }
+     saveRDS(res_id, paste("results/HIPC_MMD_maxsize/", chosen_cell, "_", id, ".rds", sep = ""))
+     print(paste("Computation done for cell :", chosen_cell, ", with id ", id))
+     print(lubridate::now() - start)
+     print("")
+     print("")
+     return(res_id)
+   }
+   print(paste("results/HIPC_MMD_maxsize/", chosen_cell, "tot.rds", sep = ""))
+   saveRDS(res_cell, paste("results/HIPC_MMD_maxsize/", chosen_cell, "tot.rds", sep = ""))
+ }
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : grid
Le chargement a nécessité le package : mvtnorm
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : mvtnorm
Le chargement a nécessité le package : libcoin
Le chargement a nécessité le package : mvtnorm
Le chargement a nécessité le package : mvtnorm
Le chargement a nécessité le package : mvtnorm
Le chargement a nécessité le package : mvtnorm
Le chargement a nécessité le package : mvtnorm
Le chargement a nécessité le package : mvtnorm
[1] "Computation done for cell : 6 , with id  1"
Time difference of 3.996607 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  4"
Time difference of 4.00907 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  8"
Time difference of 4.010328 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  2"
Time difference of 4.025878 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  6"
Time difference of 4.039831 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  3"
Time difference of 4.054563 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  7"
Time difference of 4.071096 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  5"
Time difference of 4.078456 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  10"
Time difference of 3.649265 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  9"
Time difference of 3.705548 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  11"
Time difference of 3.725923 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  13"
Time difference of 3.697796 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  12"
Time difference of 3.731702 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  14"
Time difference of 3.750504 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  16"
Time difference of 3.751051 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  15"
Time difference of 3.791109 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  20"
Time difference of 3.612875 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  18"
Time difference of 3.670552 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  17"
Time difference of 3.72573 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  19"
Time difference of 3.695466 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  21"
Time difference of 3.69635 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  22"
Time difference of 3.718279 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  23"
Time difference of 3.694816 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  24"
Time difference of 3.753203 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  25"
Time difference of 3.512269 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  27"
Time difference of 3.506131 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  26"
Time difference of 3.568164 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  28"
Time difference of 3.513 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  29"
Time difference of 3.547808 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  30"
Time difference of 3.532337 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  31"
Time difference of 3.580535 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  32"
Time difference of 3.618946 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  33"
Time difference of 3.348578 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  34"
Time difference of 3.35034 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  36"
Time difference of 3.408656 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  38"
Time difference of 3.306248 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  35"
Time difference of 3.488465 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  37"
Time difference of 3.44734 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  39"
Time difference of 3.422156 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  40"
Time difference of 3.457373 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  42"
Time difference of 3.219952 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  41"
Time difference of 3.267307 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  44"
Time difference of 3.246977 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  43"
Time difference of 3.285524 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  45"
Time difference of 3.308721 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  47"
Time difference of 3.287742 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  46"
Time difference of 3.36676 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  48"
Time difference of 3.347569 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  50"
Time difference of 3.199945 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  49"
Time difference of 3.233438 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  51"
Time difference of 3.194549 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  52"
Time difference of 3.212053 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  53"
Time difference of 3.187771 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  55"
Time difference of 3.276789 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  54"
Time difference of 3.295682 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  56"
Time difference of 3.27617 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  58"
Time difference of 2.87925 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  57"
Time difference of 3.002732 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  59"
Time difference of 2.931198 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  60"
Time difference of 2.976289 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  61"
Time difference of 2.906286 hours
[1] ""
[1] ""
[1] "Computation done for cell : 6 , with id  62"
Time difference of 2.944574 hours
[1] ""
[1] ""
[1] "results/HIPC_MMD_maxsize/6tot.rds"
> 
> parallel::stopCluster(cl = my.cluster)
> 
